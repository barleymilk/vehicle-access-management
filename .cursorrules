# Git Commit Message Convention

When generating git commit messages, always follow these conventions:

## Format
```
<type>(<scope>): <subject>

<body>

<footer>
```

## Types
- **feat**: 새로운 기능 추가
- **fix**: 버그 수정
- **docs**: 문서 수정
- **style**: 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
- **refactor**: 코드 리팩토링
- **test**: 테스트 코드, 리팩토링 테스트 코드 추가
- **chore**: 빌드 업무 수정, 패키지 매니저 수정
- **perf**: 성능 개선
- **ci**: CI/CD 관련 수정
- **build**: 빌드 시스템 수정

## Scope (선택사항)
- **ui**: UI 컴포넌트
- **api**: API 관련
- **auth**: 인증/권한
- **db**: 데이터베이스
- **config**: 설정 파일
- **util**: 유틸리티 함수

## Rules
1. Subject는 50자 이내로 작성
2. Subject는 명령문으로 작성 (예: "Add feature" not "Added feature")
3. Subject 끝에 마침표 금지
4. Body는 72자마다 줄바꿈
5. Body에서는 "what"과 "why"를 설명 ("how"는 코드에서 확인)

## Language
- **모든 commit 메시지는 한국어로 작성**
- Type과 scope는 영어로 유지
- Subject와 body는 한국어로 작성

## Examples
```
feat(auth): JWT 토큰 검증 기능 추가

보호된 라우트에 대한 JWT 토큰 검증 미들웨어를 추가합니다.
인증된 사용자만 민감한 데이터에 접근할 수 있도록 보장합니다.

Closes #123
```

```
fix(ui): 버튼 클릭 핸들러 이슈 해결

터치 이벤트 충돌로 인해 모바일 기기에서
이벤트 핸들러가 실행되지 않는 문제를 수정합니다.
```

```
docs: 설치 가이드로 README 업데이트
```

```
refactor(util): 날짜 포맷팅 함수 개선

코드 가독성을 높이고 성능을 개선하기 위해
날짜 포맷팅 로직을 리팩토링합니다.
```

Always generate commit messages in Korean following this exact format and conventions. 